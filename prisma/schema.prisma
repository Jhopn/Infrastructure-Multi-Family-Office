generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Frequency {
  single
  monthly
  annual
}

enum GoalType {
  Performance
  Sports
  FOBL
}

enum FamilyProfile {
  conservative
  moderate
  aggressive
  very_aggressive
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())

  UserAccess UserAccess[]
}

model Client {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  age           Int
  status        Boolean
  familyProfile FamilyProfile
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  goals        Goal[]
  wallets      Wallet[]
  idealWallets IdealWallet[]
  simulations  Simulation[]
  events       Event[]
  insurances   Insurance[]
  retirement   RetirementProfile?
  netWorths    NetWorthSnapshot[]
}

model Goal {
  id          String   @id @default(uuid())
  clientId    String
  type        GoalType
  subtype     String?
  targetValue Float
  targetDate  DateTime
  version     Int
  createdAt   DateTime @default(now())

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Wallet {
  id            String   @id @default(uuid())
  clientId      String
  totalValue    Float
  assetClass    String
  percentage    Float
  category      String
  indexer       String?
  custodian     String?
  liquidityDays Int?
  createdAt     DateTime @default(now())

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model IdealWallet {
  id         String   @id @default(uuid())
  clientId   String
  assetClass String
  targetPct  Float
  createdAt  DateTime @default(now())

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model RetirementProfile {
  id                  String   @id @default(uuid())
  clientId            String   @unique
  desiredIncome       Float
  expectedReturn      Float
  pgblContribution    Float
  retirementAge       Int?
  currentContribution Float?
  createdAt           DateTime @default(now())

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Simulation {
  id        String   @id @default(uuid())
  clientId  String
  label     String
  rate      Float
  startDate DateTime
  createdAt DateTime @default(now())

  client     Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  dataPoints SimulationData[]
}

model SimulationData {
  id             String @id @default(uuid())
  simulationId   String
  year           Int
  projectedValue Float

  simulation Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)
}

model Event {
  id          String    @id @default(uuid())
  clientId    String
  type        String
  value       Float
  frequency   Frequency
  description String?
  startDate   DateTime
  endDate     DateTime?

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Insurance {
  id             String   @id @default(uuid())
  clientId       String
  type           String
  coverageAmount Float
  createdAt      DateTime @default(now())

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model NetWorthSnapshot {
  id       String   @id @default(uuid())
  clientId String
  value    Float
  date     DateTime

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model UserAccess {
  id        String   @id @default(uuid())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  Access    Access?  @relation(fields: [accessId], references: [id])
  accessId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Access {
  id         String       @id @default(uuid())
  name       String       @unique
  UserAccess UserAccess[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}
