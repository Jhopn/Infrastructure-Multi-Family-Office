generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  role         Role
  createdAt    DateTime @default(now())
}

enum Role {
  user
  admin
}

model Client {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  age           Int
  status        Boolean
  familyProfile String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  goals       Goal[]
  wallets     Wallet[]
  simulations Simulation[]
  events      Event[]
  insurances  Insurance[]
}

model Goal {
  id          Int      @id @default(autoincrement())
  clientId    Int
  type        String
  targetValue Float
  targetDate  DateTime
  createdAt   DateTime @default(now())
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Wallet {
  id         Int      @id @default(autoincrement())
  clientId   Int
  totalValue Float
  assetClass String
  percentage Float
  createdAt  DateTime @default(now())
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Simulation {
  id        Int      @id @default(autoincrement())
  clientId  Int
  rate      Float
  startDate DateTime
  createdAt DateTime @default(now())
  client     Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  dataPoints SimulationData[]
}

model SimulationData {
  id             Int   @id @default(autoincrement())
  simulationId   Int
  year           Int
  projectedValue Float
  simulation Simulation @relation(fields: [simulationId], references: [id], onDelete: Cascade)
}

model Event {
  id        Int       @id @default(autoincrement())
  clientId  Int
  type      String
  value     Float
  frequency Frequency
  startDate DateTime
  endDate   DateTime?
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

enum Frequency {
  single
  monthly
  annual
}

model Insurance {
  id             Int      @id @default(autoincrement())
  clientId       Int
  type           String
  coverageAmount Float
  createdAt      DateTime @default(now())
  client         Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}
